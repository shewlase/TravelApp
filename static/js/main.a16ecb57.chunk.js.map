{"version":3,"sources":["logo.svg","Weather.jsx","parent.jsx","Restaurants.jsx","Gig.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherComponent","Component","props","state","cityName","mainTemp","main","apiRes","this","RestaurantsComponent","name","description","collectionId","location","locationId","fetchData","fetch","then","res","json","result","setState","collections","collection","title","error","className","data","GigComponent","venue","date","gig1","resultsPage","results","event","city","displayName","gigName","zomCityId","songKickId","searchTerm","App","changeLocation","fetchZomatoLocation","fetchSongKickLocation","searchQuery","keyDown","bind","locationString","metroArea","id","console","log","fetchSongKick","locationID","songKickData","location_suggestions","fetchZomato","zomatoData","target","value","keyCode","onClick","onChange","handleType","onKeyDown","type","Weather","Restaurants","Gig","React","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a16ecb57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\n\r\nvar weatherkey = '289b20ec1089556a06827982331242b7';\r\nvar londonWeatherID = 2643744;\r\nclass WeatherComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // name: props.name,\r\n      // job: props.job,\r\n      // src: props.src,\r\n      cityName: 'a',\r\n      mainTemp: 2,\r\n      main: '',\r\n      apiRes: {},\r\n      };\r\n    }\r\n\r\n  /*  componentDidMount() {\r\n      fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + londonWeatherID+ '&appid=' + weatherkey)\r\n    //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\r\n    // fetch(\"https://api.example.com/items\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n\r\n          //other calculations for high low and images here\r\n\r\n          this.setState({\r\n            // isLoaded: true,\r\n            cityName: result.city.name,\r\n            mainTemp: Math.round(parseFloat(result.list[0].main.temp)-273.15),\r\n            main: result.list[0].main,\r\n            apiRes: result,\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            // isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n  } */\r\n\r\n      render() {\r\n\r\n        return (\r\n          <div>\r\n            <h1>{this.state.cityName}</h1>\r\n\r\n            <p>{this.state.mainTemp} â„ƒ</p>\r\n\r\n          </div>\r\n\r\n\r\n        );\r\n        // return <h1>I'm the parent component.</h1>;\r\n      }\r\n  }\r\n\r\n\r\n  export default WeatherComponent;\r\n","import React, { Component } from 'react';\r\n\r\nvar pexelsKey = '563492ad6f91700001000001da0ffdd88dd64342b698ac6fb52e2a29';\r\n\r\nclass ParentComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: props.name,\r\n      job: props.job,\r\n      src: props.src,\r\n    };\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <h1>{this.state.name}</h1>\r\n\r\n        <p>{this.state.job}</p>\r\n\r\n        <img alt = 'gax' src={this.state.src}></img>\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n    // return <h1>I'm the parent component.</h1>;\r\n  }\r\n\r\n}\r\n\r\nexport default ParentComponent;\r\n","import React, { Component } from 'react';\r\n\r\nvar zomatoKey = 'dfb3484d191ae8bed61de303469acbec';\r\nvar londonZomID = 61;\r\nvar goldCoastZomID = 2555;\r\n\r\nclass RestaurantsComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // name: props.name,\r\n      // job: props.job,\r\n      // src: props.src,\r\n      name: 'a',\r\n      description: 'b',\r\n      collectionId: props.collectionId,\r\n      location: props.location,\r\n      apiRes: {},\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      // this.fetchData(this.state.location);\r\n  }\r\n\r\n  fetchData(locationId)\r\n  {\r\n    let fetchData =\r\n    {\r\n        \"method\": \"GET\",\r\n       \"headers\":\r\n      {\r\n        \"user-key\": zomatoKey\r\n      }\r\n    }\r\n     fetch('https://developers.zomato.com/api/v2.1/collections?city_id='+locationId , fetchData)\r\n  //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\r\n  // fetch(\"https://api.example.com/items\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n\r\n        //other calculations for high low and images here\r\n\r\n        this.setState({\r\n          // isLoaded: true,\r\n          name: result.collections[this.state.collectionId].collection.title,\r\n          description: result.collections[this.state.collectionId].collection.description,\r\n          apiRes: result,\r\n        });\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        this.setState({\r\n          // isLoaded: true,\r\n          error\r\n        });\r\n      }\r\n    )\r\n  }\r\n\r\n      render() {\r\n\r\n        /* this.fetchData(this.props.location); */\r\n        return (\r\n          <div className='restaurant'>\r\n            <h1>{this.props.data.collection.title}</h1>\r\n\r\n            <p>{this.props.data.collection.description}</p>\r\n\r\n          </div>\r\n\r\n\r\n        );\r\n        // return <h1>I'm the parent component.</h1>;\r\n      }\r\n  }\r\n\r\n\r\n  export default RestaurantsComponent;\r\n","import React, { Component } from 'react';\r\n\r\nvar londonGigID = 24426;\r\nvar goldCoastGigID = 26785;\r\n\r\nclass GigComponent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // name: props.name,\r\n      // job: props.job,\r\n      // src: props.src,\r\n      name: 'a',\r\n      venue: 'b',\r\n      location: 'c',\r\n      date: '',\r\n      // collectionId: props.collectionId,\r\n      // locationId: props.location,\r\n      // apiRes: props.data,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      // fetchData();\r\n  }\r\n\r\n  fetchData(locationId)\r\n  {\r\n    //https://api.songkick.com/api/3.0/search/locations.json?query=\"Location String\"&apikey=\r\n    fetch('https://api.songkick.com/api/3.0/metro_areas/'+locationId+'/calendar.json?apikey=b7gkiDLuqicUVMIA')\r\n //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\r\n // fetch(\"https://api.example.com/items\")\r\n   .then(res => res.json())\r\n   .then(\r\n     (result) => {\r\n\r\n       //other calculations for high low and images here\r\n       let gigList = result.resultsPage.results.event;\r\n       let gig1 = gigList[this.state.collectionId];\r\n       let location = gig1.location.city;\r\n       let venue = gig1.venue.displayName;\r\n       let gigName = gig1.displayName;\r\n       this.setState({\r\n         // isLoaded: true,\r\n         name: gigName,\r\n         venue: venue,\r\n         location: location,\r\n         locationId: locationId,\r\n         date: '',\r\n         apiRes: {},\r\n       });\r\n     },\r\n     // Note: it's important to handle errors here\r\n     // instead of a catch() block so that we don't swallow\r\n     // exceptions from actual bugs in components.\r\n     (error) => {\r\n       this.setState({\r\n         // isLoaded: true,\r\n         error\r\n       });\r\n     }\r\n   )\r\n  }\r\n\r\n      render() {\r\n        /* this.fetchData(this.props.location); */\r\n        return (\r\n          <div className='restaurant'>\r\n\r\n            <p>{this.props.data.displayName}</p>\r\n            <p>{this.props.data.location.city}</p>\r\n            <p>{this.props.data.venue.displayName}</p>\r\n\r\n          </div>\r\n\r\n\r\n        );\r\n      }\r\n  }\r\n\r\n\r\n  export default GigComponent;\r\n","import React from 'react';\nimport ParentComponent from './parent'\nimport WeatherComponent from './Weather'\nimport RestaurantsComponent from './Restaurants'\nimport GigComponent from './Gig'\nimport logo from './logo.svg';\nimport './App.css';\nvar londonZomID = 61;\nvar goldCoastZomID = 280;\nvar zomatoKey = 'dfb3484d191ae8bed61de303469acbec';\n\nvar goldCoastGigID = 26785;\nvar londonGigID = 24426;\n\nvar londonWeatherID = 2643744;\nvar surfersWeatherID = 2147849;\n\nvar zomCityId = 0;\nvar songKickId = 0;\nvar searchTerm = '';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: 'auckland',\n      // location: goldCoastZomID,\n      // gigLocation: goldCoastGigID,\n\n      // weatherData: {},\n      // zomatoData: {displayName: 'yo'},\n      //need to store json from all 3 fetches\n       //weatherData, zomatoData, gigData\n    }\n    this.keyDown = this.keyDown.bind(this);\n  }\n\n  fetchSongKickLocation(locationString)\n  {\n    //https://api.songkick.com/api/3.0/search/locations.json?query=\"Location String\"&apikey=\n    fetch('https://api.songkick.com/api/3.0/search/locations.json?query='+locationString+'&apikey=b7gkiDLuqicUVMIA')\n    //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\n    // fetch(\"https://api.example.com/items\")\n    .then(res => res.json())\n    .then(\n     (result) => {\n         songKickId = result.resultsPage.results.location[0].metroArea.id;\n         // songKickData: result.resultsPage.results;\n\n       console.log(songKickId);\n       this.fetchSongKick(songKickId);\n     },\n     (error) => {\n       this.setState({\n         error\n       });\n     }\n    )\n  }\n\n  fetchSongKick(locationID)\n  {\n    //https://api.songkick.com/api/3.0/search/locations.json?query=\"Location String\"&apikey=\n    fetch('https://api.songkick.com/api/3.0/metro_areas/'+locationID+'/calendar.json?apikey=b7gkiDLuqicUVMIA')\n    //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\n    // fetch(\"https://api.example.com/items\")\n    .then(res => res.json())\n    .then(\n     (result) => {\n       this.setState({\n         songKickData: result.resultsPage.results,\n       });\n     },\n     (error) => {\n       this.setState({\n         error\n       });\n     }\n    )\n  }\n\n    fetchZomatoLocation(searchQuery)\n    {\n      let fetchData =\n      {\n          \"method\": \"GET\",\n         \"headers\":\n        {\n          \"user-key\": zomatoKey\n        }\n      }\n       fetch('https://developers.zomato.com/api/v2.1/cities?q='+searchQuery , fetchData)\n    //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\n    // fetch(\"https://api.example.com/items\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          //other calculations for high low and images here\n          zomCityId = result.location_suggestions[0].id;\n          console.log(zomCityId);\n          this.fetchZomato(zomCityId);\n        },\n        (error) => {\n          console.log(error);\n        }\n      )\n    }\n\n    fetchZomato(locationId)\n    {\n      let fetchData =\n      {\n          \"method\": \"GET\",\n         \"headers\":\n        {\n          \"user-key\": zomatoKey\n        }\n      }\n       fetch('https://developers.zomato.com/api/v2.1/collections?city_id='+locationId , fetchData)\n    //   fetch('http://api.openweathermap.org/data/2.5/forecast?id=' + cityID+ '&appid=' + weatherkey)\n    // fetch(\"https://api.example.com/items\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n          //other calculations for high low and images here\n\n          this.setState({\n            zomatoData: result.collections,\n          });\n        },\n        (error) => {\n          this.setState({\n            // isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n\n  fetchAllData(locationString)\n  {\n    // fetchWeather(locationString);\n    this.fetchZomato(locationString);\n    this.fetchSongKick(locationString);\n  }\n\n  componentDidMount() {\n    // this.fetchAllData();\n    // this.fetchZomatoLocation('manchester');\n  }\n\n  changeLocation = () => {\n    //re fetch data with new location string\n    // this.fetchZomatoLocation(this.state.searchQuery);\n    this.fetchZomatoLocation(searchTerm);\n    this.fetchSongKickLocation(searchTerm);\n    //toggle location between surfers and london\n    // this.setState({\n    //     location: londonZomID,\n    //     // location: 'surfers',\n    //   });\n  }\n\n  handleType(event)\n  {\n    // this.setState({\n    //   searchQuery: event.target.value,\n    // });\n    searchTerm = event.target.value;\n  }\n\n  keyDown(event)\n  {\n    if(event.keyCode == 13)\n    {\n      this.changeLocation();\n    }\n  }\n  //send all components fetched data\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <button onClick={this.changeLocation}>Search</button>\n          <input id='searchInput' onChange={this.handleType} onKeyDown={this.keyDown} type='text'></input>\n          <WeatherComponent />\n\n          <h1>Eat</h1>\n          {this.state.zomatoData ?\n          <div className='restaurantGrid'>\n            <RestaurantsComponent data={this.state.zomatoData[0]}/>\n            <RestaurantsComponent data={this.state.zomatoData[1]}/>\n            <RestaurantsComponent data={this.state.zomatoData[2]}/>\n          </div> : <p>Loading...</p>}\n          <h1>Music</h1>\n\n          {this.state.songKickData ?\n              <div className='restaurantGrid'>\n                <GigComponent data={this.state.songKickData.event[0]}/>\n                <GigComponent data={this.state.songKickData.event[1]}/>\n                <GigComponent data={this.state.songKickData.event[2]}/>\n              </div> : <p>Loading...</p>}\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}